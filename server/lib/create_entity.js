// Generated by CoffeeScript 1.12.2
(function() {
  var _, buildStatement, builders, editableProperties, formatClaims, formatValues, post, ref, statementBase, statementBuilders, tests, wdk, whitelistedProperties,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  post = require('./request').post;

  _ = require('./utils');

  ref = require('../lib/helpers'), whitelistedProperties = ref.whitelistedProperties, editableProperties = ref.editableProperties, builders = ref.builders, tests = ref.tests;

  wdk = require('wikidata-sdk');

  module.exports = function(data) {
    var claims, descriptions, labels, params, summary;
    labels = data.labels, descriptions = data.descriptions, claims = data.claims, summary = data.summary;
    params = {
      summary: summary,
      assert: 'user',
      data: {
        labels: formatValues(labels),
        descriptions: formatValues(descriptions),
        claims: formatClaims(claims)
      }
    };
    if (typeof id !== "undefined" && id !== null) {
      params.id = id;
    } else {
      params['new'] = 'item';
    }
    _.log(params, 'PARAMS');
    return post('wbeditentity', params);
  };

  formatValues = function(values) {
    var lang, obj, value;
    obj = {};
    for (lang in values) {
      value = values[lang];
      obj[lang] = {
        language: lang,
        value: value
      };
    }
    return _.log(obj, 'formatted values');
  };

  formatClaims = function(claims) {
    var err, i, len, obj, pid, ref1, val, values;
    _.log(claims, 'claims');
    obj = {};
    for (pid in claims) {
      values = claims[pid];
      if (indexOf.call(editableProperties, pid) < 0) {
        err = new Error("unknown property: " + pid);
        err.context = claims;
        throw err;
      }
      obj[pid] || (obj[pid] = []);
      ref1 = _.forceArray(values);
      for (i = 0, len = ref1.length; i < len; i++) {
        val = ref1[i];
        obj[pid].push(buildStatement(pid, val));
      }
    }
    return obj;
  };

  buildStatement = function(pid, value) {
    var err, type;
    type = whitelistedProperties[pid];
    if (!tests[type](value)) {
      err = new Error("invalid " + type + " value");
      err.context = arguments;
      throw err;
    }
    return statementBuilders[type](pid, value);
  };

  statementBuilders = {
    string: function(pid, string) {
      return statementBase(pid, 'string', string);
    },
    claim: function(pid, qid) {
      var id;
      id = wdk.getNumericId(qid);
      return statementBase(pid, 'wikibase-entityid', {
        'entity-type': 'item',
        'numeric-id': Number(id)
      });
    },
    monolingualtext: function(pid, valueObj) {
      var language, text;
      text = valueObj.text, language = valueObj.language;
      return statementBase(pid, 'monolingualtext', valueObj);
    },
    time: function(pid, year) {
      return statementBase(pid, 'time', {
        time: "+" + year + "-00-00T00:00:00Z",
        timezone: 0,
        before: 0,
        after: 0,
        precision: 9,
        calendarmodel: "http://www.wikidata.org/entity/Q1985727"
      });
    },
    quantity: function(pid, num) {
      return statementBase(pid, 'quantity', {
        lowerBound: "+" + num,
        upperBound: "+" + num,
        unit: '1',
        amount: "+" + num
      });
    }
  };

  statementBase = function(pid, type, value) {
    return {
      rank: 'normal',
      type: 'statement',
      mainsnak: {
        datavalue: {
          type: type,
          value: value
        },
        property: pid,
        snaktype: 'value'
      }
    };
  };

}).call(this);

//# sourceMappingURL=create_entity.js.map
