// Generated by CoffeeScript 1.12.2
(function() {
  var _, post, postRef, referenceSources, wdk,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  post = require('./request').post;

  _ = require('./utils');

  referenceSources = require('./reference_sources');

  wdk = require('wikidata-sdk');

  module.exports = function(entity, property, value, ref) {
    return post('wbcreateclaim', {
      value: value,
      entity: entity,
      property: property,
      snaktype: 'value',
      assert: 'user'
    }).then(_.Log('wbcreateclaim body')).then(function(body) {
      var ref1;
      if (ref && (((ref1 = body.claim) != null ? ref1.id : void 0) != null)) {
        return postRef(body.claim.id, ref);
      } else {
        return _.warn(body, 'not posting a reference');
      }
    });
  };

  postRef = function(guid, ref) {
    var id, snaks;
    _.log([guid, ref], 'posting a reference');
    if (/^http/.test(ref)) {
      snaks = {
        P854: [
          {
            snaktype: 'value',
            property: 'P854',
            datavalue: {
              type: 'string',
              value: ref
            }
          }
        ]
      };
    }
    if (indexOf.call(referenceSources, ref) >= 0) {
      id = wdk.getNumericId(ref);
      snaks = {
        P143: [
          {
            snaktype: 'value',
            property: 'P143',
            datavalue: {
              type: 'wikibase-entityid',
              value: {
                'entity-type': 'item',
                'numeric-id': id
              }
            }
          }
        ]
      };
    }
    return post('wbsetreference', {
      statement: guid,
      snaks: JSON.stringify(snaks)
    });
  };

}).call(this);

//# sourceMappingURL=create_claim.js.map
