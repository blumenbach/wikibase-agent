// Generated by CoffeeScript 1.12.2
(function() {
  var CONFIG, _, archives_, breq, builders, createClaim, editableProperties, errors_, ref1, referenceSources, tests, wdk, whitelistedProperties,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  CONFIG = require('config');

  breq = require('bluereq');

  _ = require('../lib/utils');

  wdk = require('wikidata-sdk');

  errors_ = require('../lib/errors');

  archives_ = require('../lib/archives');

  createClaim = require('../lib/create_claim');

  ref1 = require('../lib/helpers'), whitelistedProperties = ref1.whitelistedProperties, editableProperties = ref1.editableProperties, builders = ref1.builders, tests = ref1.tests;

  referenceSources = require('../lib/reference_sources');

  module.exports = {
    post: function(req, res, next) {
      var body, builder, entity, property, ref, test, type, value;
      body = req.body;
      if (body == null) {
        return errors_.e400(res, 'empty body');
      }
      _.log(body, 'body');
      entity = body.entity, property = body.property, value = body.value, ref = body.ref;
      if (!wdk.isWikidataEntityId(entity)) {
        return errors_.e400(res, 'bad entity id', entity);
      }
      if (!wdk.isWikidataPropertyId(property)) {
        return errors_.e400(res, 'bad property id', property);
      }
      if (indexOf.call(editableProperties, property) < 0) {
        return errors_.e400(res, 'property isnt whitelisted yet', property);
      }
      if (value == null) {
        return errors_.e400(res, 'empty value', value);
      }
      type = whitelistedProperties[property];
      test = tests[type];
      if (type === 'string' && tests.claim(value)) {
        return errors_.e400(res, 'expected a string value, got a Wikidata id', value);
      }
      builder = builders[type];
      if (!test(value)) {
        return errors_.e400(res, 'invalid value', value);
      }
      if (archives_.repeatingHistory(entity, property, value)) {
        return errors_.e400(res, 'this value has already been posted', body);
      }
      if ((ref != null) && !/^http/.test(ref) && indexOf.call(referenceSources, ref) < 0) {
        return errors_.e400(res, 'invalid reference', body);
      }
      return createClaim(entity, property, builder(value), ref).tap(archives_.updateArchives.bind(null, entity, property, value)).then(res.json.bind(res))["catch"](errors_.e500.bind(null, res));
    }
  };

}).call(this);

//# sourceMappingURL=claim.js.map
